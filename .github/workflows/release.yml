name: CI – Release

on:
  push:
    tags: ['v*.*.*']

jobs:
  # 确保代码质量和测试通过
  lint:
    name: 🧹 Lint
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: ♻️ Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: ♻️ Cache venv
        uses: actions/cache@v4
        with:
          path: ~/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: 📦 Install dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --with dev

      - name: 🕵️ Ruff check
        run: poetry run ruff check .

      - name: 🕵️ Mypy type check
        run: poetry run mypy book_ocr tests

  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: ♻️ Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: ♻️ Cache venv
        uses: actions/cache@v4
        with:
          path: ~/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: 📦 Install dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --with dev

      - name: 🧪 Run pytest
        run: poetry run pytest -v

  # 构建多平台二进制
  build:
    name: 🔨 Build Binary
    needs: [lint, test]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: boocr-linux-amd64
            asset_name: boocr-linux-amd64.tar.gz
            archive_cmd: tar -czvf
            archive_ext: tar.gz
          - os: windows-latest
            artifact_name: boocr-windows-amd64
            asset_name: boocr-windows-amd64.zip
            archive_cmd: powershell Compress-Archive -Path
            archive_ext: zip

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: ♻️ Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-3.10-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-3.10-

      - name: ♻️ Cache venv
        uses: actions/cache@v4
        with:
          path: ~/.venv
          key: venv-${{ runner.os }}-3.10-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-3.10-

      - name: 📦 Install dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --with dev

      - name: 🔍 Verify version matches tag
        shell: bash
        run: |
          TAG_VERSION="${{ github.ref_name }}"
          TAG_VERSION="${TAG_VERSION#v}"  # 去掉前缀 'v'
          PACKAGE_VERSION=$(poetry run python -c "import book_ocr; print(book_ocr.__version__)")
          echo "Tag version: $TAG_VERSION"
          echo "Package version: $PACKAGE_VERSION"
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "::error::Version mismatch! Tag is $TAG_VERSION but package version is $PACKAGE_VERSION"
            exit 1
          fi

      - name: 🔨 Build binary
        run: |
          poetry run pyinstaller -y boocr.spec

      - name: 📦 Package (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p release
          cp dist/boocr release/
          cd release
          tar -czvf ../${{ matrix.asset_name }} .
          cd ..
          sha256sum ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256

      - name: 📦 Package (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          mkdir -p release
          Copy-Item dist/boocr.exe release/
          Compress-Archive -Path release/* -DestinationPath ${{ matrix.asset_name }}
          Get-FileHash -Algorithm SHA256 ${{ matrix.asset_name }} | ForEach-Object { $_.Hash } > ${{ matrix.asset_name }}.sha256

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.asset_name }}
            ${{ matrix.asset_name }}.sha256
          retention-days: 7

  # 创建GitHub Release并上传构建物
  release:
    name: 📢 Create Release
    needs: build
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # 需要写入权限来创建release
    
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4
        
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: 📝 Prepare release files
        run: |
          mkdir release_files
          find artifacts -type f -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" | xargs -I{} cp {} release_files/
          ls -la release_files/
          
      - name: 🏷️ Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_files/*
          draft: false
          prerelease: false
          generate_release_notes: true 